name: CI/CD Pipeline

on:
  pull_request:
    branches: [ master ]
    types: [opened, reopened, ready_for_review, closed]  # include closed to catch merges
  push:
    branches: [ master ]

jobs:
  lint:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
          pip install -e ".[dev]"
      - name: Run Ruff
        run: ruff check src/ tests/ examples/
      - name: Run Black
        run: black --check src/ tests/ examples/
      - name: Run MyPy
        run: mypy src/
        continue-on-error: true

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run unit tests
        run: pytest tests/ -v --tb=short
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=src/shieldgents --cov-report=xml --cov-report=term
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run integration tests
        run: pytest tests/ -v -m integration --tb=short
        continue-on-error: true

  security-check:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      - name: Run Safety check
        run: safety check --json
        continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Check package
        run: twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  # ------------------------------
  # Telegram notifications
  # ------------------------------

  notify-telegram-pr:
    name: Notify Telegram (PR opened)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' &&
            (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review') &&
            secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
    steps:
      - name: Send Telegram message
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          PR_NUM: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          HEAD_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          set -euo pipefail
          API_URL="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          MSG="\<b\>New Pull Request\</b\>
Repo: \<code\>${REPO}\</code\>
By: \<b\>${ACTOR}\</b\>
PR: \<b\>#${PR_NUM}\</b\> — ${PR_TITLE}
Branch: \<code\>${HEAD_BRANCH}\</code\> → \<code\>${BASE_BRANCH}\</code\>
Link: ${PR_URL}"
          echo "Token length: ${#TG_TOKEN}, Chat ID: ${CHAT_ID}"
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/resp.json "$API_URL" \
            -d "chat_id=${CHAT_ID}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" \
            --data-urlencode "text=${MSG}")
          echo "Telegram response:"; cat /tmp/resp.json; echo; echo "HTTP ${HTTP_CODE}"
          [ "$HTTP_CODE" = "200" ] || exit 1

  notify-telegram-merged:
    name: Notify Telegram (PR merged)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' &&
            github.event.action == 'closed' &&
            github.event.pull_request.merged == true &&
            secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
    steps:
      - name: Send Telegram message (merged)
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.event.pull_request.merged_by.login }}
          PR_NUM: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          HEAD_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          set -euo pipefail
          API_URL="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          MSG="✅ \<b\>PR Merged\</b\>
Repo: \<code\>${REPO}\</code\>
By: \<b\>${ACTOR}\</b\>
PR: \<b\>#${PR_NUM}\</b\> — ${PR_TITLE}
Branch: \<code\>${HEAD_BRANCH}\</code\> → \<code\>${BASE_BRANCH}\</code\>
Link: ${PR_URL}"
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/resp.json "$API_URL" \
            -d "chat_id=${CHAT_ID}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" \
            --data-urlencode "text=${MSG}")
          echo "Telegram response:"; cat /tmp/resp.json; echo; echo "HTTP ${HTTP_CODE}"
          [ "$HTTP_CODE" = "200" ] || exit 1
